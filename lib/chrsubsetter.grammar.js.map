{
  "version": 3,
  "file": "chrsubsetter.grammar.js",
  "sourceRoot": "..",
  "sources": [
    "src/chrsubsetter.grammar.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/GRAMMARS/CHRSUBSETTER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n# CHVTN                     = require 'chevrotain'\n{ lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\ntypes                     = require '../paragate/lib/types'\n{ isa\n  type_of\n  validate }              = types\nGRAMMAR                   = require '../paragate/lib/grammar'\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\nMultimix                  = require '../paragate/node_modules/multimix'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_preset_default = ( preset ) ->\n  ### TAINT also allow regexes outside of objects? ###\n  ### TAINT validate regexes? no anchor, sticky, unicode ###\n  @sets = [\n    { name: 'spaces',       match: /// \\s+         ///yu, } ### less specific ###\n    { name: 'punctuations', match: /// [=,.;:!?]+  ///yu, }\n    { name: 'signs',        match: /// [-+]+       ///yu, }\n    { name: 'digits',       match: /// [0-8]+      ///yu, }\n    { name: 'newlines',     match: /// \\n+         ///yu, }\n    { name: 'ucletters',    match: /// [A-Z]+      ///yu, }\n    { name: 'lcletters',    match: /// [a-z]+      ///yu, } ### more specific ###\n    ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_preset_blocks = ( preset ) ->\n  @sets = []\n  for { first, last, name, } in INTERTEXT.UCD.get_block_list()\n    first_cid_txt = first.toString  16\n    last_cid_txt  = last.toString   16\n    match         = new RegExp \"[\\\\u{#{first_cid_txt}}-\\\\u{#{last_cid_txt}}]+\", 'yu'\n    name          = name.replace /\\s/g, '_'\n    @sets.push { name, match, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_preset_planes = ( preset ) ->\n  @sets = []\n  for plane in [ 0x00 .. 0x10 ]\n    plane_prfx    = ( plane.toString 16 ).padStart 2, '0'\n    first_cid_txt = \"#{plane_prfx}0000\"\n    last_cid_txt  = \"#{plane_prfx}ffff\"\n    match         = new RegExp \"[\\\\u{#{first_cid_txt}}-\\\\u{#{last_cid_txt}}]+\", 'yu'\n    name          = \"plane-#{plane_prfx}\"\n    @sets.push { name, match, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_preset_halfplanes = ( preset ) ->\n  @sets = []\n  for plane in [ 0x00 .. 0x10 ]\n    for half in [ 0, 1, ]\n      plane_prfx    = ( plane.toString 16 ).padStart 2, '0'\n      if half is 0\n        sfx           = 'lo'\n        first_cid_txt = \"#{plane_prfx}0000\"\n        last_cid_txt  = \"#{plane_prfx}7fff\"\n      else\n        sfx           = 'hi'\n        first_cid_txt = \"#{plane_prfx}8000\"\n        last_cid_txt  = \"#{plane_prfx}ffff\"\n      match         = new RegExp \"[\\\\u{#{first_cid_txt}}-\\\\u{#{last_cid_txt}}]+\", 'yu'\n      name          = \"halfplane-#{plane_prfx}.#{sfx}\"\n      @sets.push { name, match, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_create_preset_words = ( preset ) ->\n  ### thx to https://mathiasbynens.be/notes/es-unicode-property-escapes ###\n  @sets = [\n    { name: 'word', match: /// [\n      \\p{Alphabetic}\n      \\p{Mark}\n      \\p{Decimal_Number}\n      \\p{Connector_Punctuation}\n      \\p{Join_Control}\n      ]+ ///yu, }\n    ]\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n# count_chrs = ( text ) -> ( text.split   /// . ///u       ).length - 1\ncount_chrs = ( text ) -> ( text.replace /// . ///gu, '.' ).length\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( source ) ->\n  validate.text source\n  R1            = []\n  chr_idx       = 0\n  last_chr_idx  = source.length - 1\n  set_idx       = null\n  last_cat_idx  = @sets.length - 1\n  other_start   = null\n  other_stop    = null\n  set           = null\n  found         = false\n  $vnr          = null\n  line          = 1\n  column        = 1\n  text          = null\n  #.........................................................................................................\n  get_vnr = =>\n    return [ start, ] unless @track_lines\n    R2        = [ line, column, ]\n    prv_line  = line\n    line     += ( text.match /\\n/g )?.length ? 0\n    column    = ( if prv_line is line then column else 1 ) + count_chrs ( text.match /[^\\n]*$/ )[ 0 ]\n    return R2\n  #.........................................................................................................\n  flush_other = =>\n    return unless other_start?\n    start = other_start\n    stop  = other_stop\n    text  = source[ start ... stop ]\n    $vnr  = get_vnr()\n    #.......................................................................................................\n    R1.push { $key: '^other', start, stop, text, $vnr, $: '^Б1^' }\n    other_start = null\n    other_stop  = null\n    return null\n  #.........................................................................................................\n  loop\n    break if chr_idx > last_chr_idx\n    set_idx = last_cat_idx + 1\n    found   = false\n    #.......................................................................................................\n    loop\n      set_idx--\n      break if set_idx < 0\n      set                  = @sets[ set_idx ]\n      set.match.lastIndex  = chr_idx\n      ### TAINT some serious naming calamity here ###\n      continue unless ( match = source.match set.match )?\n      #.....................................................................................................\n      flush_other()\n      [ text, ] = match\n      start     = chr_idx\n      chr_idx  += text.length\n      stop      = chr_idx\n      found     = true\n      $key      = '^' + set.name\n      $vnr      = get_vnr()\n      R1.push { $key, start, stop, text, $vnr, $: '^Б2^', }\n      break\n    #.......................................................................................................\n    unless found\n      other_start  ?= chr_idx\n      other_stop    = ( other_stop ? other_start ) + 1\n      chr_idx      += 1\n  #.........................................................................................................\n  flush_other()\n  return freeze R1\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Chrsubsetter extends Multimix\n  @include MAIN, { overwrite: true, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null ) ->\n    super()\n    defaults      = { name: null, track_lines: true, preset: 'default', }\n    settings      = { defaults..., settings..., }\n    validate.boolean        settings.track_lines\n    validate.nonempty_text  settings.preset\n    if settings.name? or ( settings.preset is 'default' )\n      settings.name  ?= 'chrsubsetter'\n      validate.nonempty_text settings.name\n      @name           = settings.name\n    else\n      @name           = \"css/#{settings.preset}\"\n    @track_lines  = settings.track_lines\n    @preset       = settings.preset\n    @_create_preset()\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_preset: ->\n    unless ( method = @[ \"_create_preset_#{@preset}\" ] )\n      throw new Error \"^4487^ unknown preset #{rpr @preset}\"\n    method.apply @\n    return null\n\n\n############################################################################################################\nmodule.exports = { Chrsubsetter, grammar: new Chrsubsetter(), }\n\n\n\n\n\n\n\n"
  ]
}