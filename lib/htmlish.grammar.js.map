{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/htmlish.grammar.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/GRAMMARS/HTMLISH'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n# CHVTN                     = require 'chevrotain'\n{ new_datom\n  lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\ntypes                     = require './types'\n{ isa\n  type_of\n  validate }              = types\nGRAMMAR                   = require './grammar'\n{ HTMLISH: PGTH }         = require 'intertext'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@lexer_modes =\n  #.........................................................................................................\n  outside_mode:\n    o_escaped:        { match: /\\\\./u,                                                          }\n    o_comment:        { match: /<!--[\\s\\S]*?-->/,                 line_breaks: true,            }\n    o_cdata:          { match: /<!\\[CDATA\\[[\\s\\S]*?]]>/,                                        }\n    o_doctype:        { match: /<!DOCTYPE\\s+[^>]*>/,                                            }\n    o_xmldecl:        { match: /<\\?xml\\s+[\\s\\S]*?\\?>/,                                          }\n    o_pi:             { match: /<\\?[\\s\\S]*?\\?>/,                                                }\n    i_slash_open:     { match: /<\\//,                             push_mode: \"inside_mode\",     }\n    i_open:           { match: /</,                               push_mode: \"inside_mode\",     }\n    o_text:           { match: /[^<\\\\]+/,                                                       }\n  #.........................................................................................................\n  inside_mode:\n    i_close:          { match: />/,                               pop_mode: true,               }\n    i_special_close:  { match: /\\?>/,                             pop_mode: true,               }\n    i_slash_close:    { match: /\\/>/,                             pop_mode: true,               }\n    stm_slash1:       { match: /\\/(?!>)/,                         push_mode: 'slashtext_mode',  }\n    i_slash:          { match: /\\//,                                                            }\n    v_equals:         { match: /\\s*=\\s*/,                         push_mode: 'value_mode',      }\n    i_name:           { match: /[^\\s!?=\\{\\[\\(<\\/>\\)\\]\\}'\"]+/,                                   }\n    i_whitespace:     { match: /[ \\t\\r\\n]/,                       skip: true,                   }\n  #.........................................................................................................\n  slashtext_mode:\n    stm_slash2:       { match: /\\//,                              switch_mode: \"outside_mode\",  }\n    stm_text:         { match: /[^\\/]+/,                                                        }\n  #.........................................................................................................\n  value_mode:\n    v_value:          { match: /\"[^\"]*\"|'[^']*'|[^>\\s\\/]+/,       pop_mode: true,               }\n\n#-----------------------------------------------------------------------------------------------------------\n@summarize = ( t ) ->\n  # `t` is an object whose keys are token names and whose values are token patterns\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'document', =>\n    @MANY =>\n      @OR [\n        { ALT: => @CONSUME t.o_escaped    }\n        { ALT: => @CONSUME t.o_doctype    }\n        { ALT: => @CONSUME t.o_xmldecl    }\n        { ALT: => @CONSUME t.o_pi         }\n        { ALT: => @CONSUME t.o_cdata      }\n        { ALT: => @CONSUME t.o_comment    }\n        { ALT: => @CONSUME t.o_text       }\n        { ALT: => @CONSUME t.stm_text     }\n        { ALT: => @SUBRULE @osntag        }\n        { ALT: => @SUBRULE @ctag          }\n        { ALT: => @CONSUME t.stm_slash2   }\n        ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'osntag', => ### `<a b=c>`, `<a b=c/>`, or `<a b=c/` ###\n    @CONSUME t.i_open\n    @CONSUME t.i_name\n    @OPTION => @SUBRULE @attributes\n    @OR [\n      { ALT: => @CONSUME t.i_close        }\n      { ALT: => @CONSUME t.i_slash_close  }\n      { ALT: => @CONSUME t.stm_slash1     }\n      ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'ctag', => ### `</a>` ###\n    @CONSUME t.i_slash_open\n    @CONSUME t.i_name\n    @CONSUME t.i_close\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'attributes', =>\n    @AT_LEAST_ONE => @SUBRULE @attribute\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'attribute', =>\n    @CONSUME t.i_name\n    @OPTION =>\n      @CONSUME t.v_equals\n      @CONSUME t.v_value\n\n#-----------------------------------------------------------------------------------------------------------\ndd = ( d ) ->\n  ### TAINT implement as optional functionality of `DATOM.new_datom()` ###\n  for k of d\n    delete d[ k ] if d[ k ] in [ undefined, null, '', ]\n  return d\n\n#-----------------------------------------------------------------------------------------------------------\n@linearize = ( source, tree, level = 0 ) ->\n  return null unless tree?\n  #.........................................................................................................\n  { name: token_name\n    $key\n    start\n    stop\n    text\n    $vnr } = tree\n  #.........................................................................................................\n  if $key is '^token'\n    switch token_name\n      when 'o_escaped'            then  yield dd { $key: '^text',                start, stop, text, $vnr, $: '^Ω1^', }\n      when 'o_text', 'stm_text'   then  yield dd { $key: '^text',                start, stop, text, $vnr, $: '^Ω2^', }\n      when 'stm_slash2'           then  yield dd { $key: '>tag', type: 'nctag',  start, stop, text, $vnr, $: '^Ω3^', }\n      when 'o_comment'            then  yield dd { $key: '^comment',             start, stop, text, $vnr, $: '^Ω4^', }\n      when 'o_pi'                 then  yield dd { $key: '^pi',                  start, stop, text, $vnr, $: '^Ω5^', }\n      when 'o_doctype'            then  yield dd { $key: '^doctype',             start, stop, text, $vnr, $: '^Ω6^', }\n      when 'o_cdata'\n        start1  = start + 9\n        stop2   = stop  - 3\n        text1   = source[ start   ... start1  ]\n        text2   = source[ start1  ... stop2   ]\n        text3   = source[ stop2   ... stop    ]\n        yield dd { $key: '<cdata', start,          stop: start1, text: text1, $vnr, $: '^Ω7^', }\n        yield dd { $key: '^text',  start: start1,  stop: stop2,  text: text2, $vnr, $: '^Ω8^', } if text2 isnt ''\n        yield dd { $key: '>cdata', start: stop2,   stop,         text: text3, $vnr, $: '^Ω9^', }\n      else yield dd { $key: '^unknown', $value: tree, $vnr, $: '^Ω10^', }\n    return null\n  throw new Error \"^445^ unknown $key #{rpr $key}\" unless $key in [ '^document', '^node', ]\n  #.........................................................................................................\n  { ukids } = tree\n  ### NOTE we assume that unique kids exist and that values are stored in source order ###\n  for _, ukid of ukids\n    $vnr = ukid.$vnr\n    break\n  #.........................................................................................................\n  if $key is '^document'\n    unless @settings.bare\n      yield dd { $key: '<document', start: 0, stop: 0, source, errors: tree.errors, $vnr: [ -Infinity, ], $: '^Ω11^', }\n    for subtree in tree.kids\n      yield from @linearize source, subtree, level + 1\n    x = text.length\n    unless @settings.bare\n      yield dd { $key: '>document', start: x, stop: x, $vnr: [ Infinity, ], $: '^Ω12^', }\n    return null\n  #.........................................................................................................\n  return null unless ( name = tree.ukids?.i_name?.text )? ### may happen when parsing errors occur ###\n  switch token_name\n    #.......................................................................................................\n    when 'osntag'\n      $key = '<tag'\n      if      tree.ukids.i_close?       then type = 'otag'\n      else if tree.ukids.i_slash_close? then type = 'stag'; $key = '^tag'\n      else if tree.ukids.stm_slash1?    then type = 'ntag'\n      if ( attributes = tree.ukids.attributes )?\n        atrs = {}\n        for attribute in attributes.kids\n          k         = attribute.ukids.i_name.text\n          v         = attribute.ukids.v_value?.text ? true\n          atrs[ k ] = v\n        d = { $key, name, type, text, start, stop, atrs, $vnr, $: '^Ω13^', }\n      else\n        d = { $key, name, type, text, start, stop, $vnr, $: '^Ω14^', }\n      #.....................................................................................................\n      # parse compact tag name:\n      if d.name? and d.name isnt ''\n        e = @_parse_compact_tagname d.name\n        if e.id?\n          if d.id?\n            throw new Error \"^paragate/htmlish/linearize@1^ duplicate IDs in #{rpr d}\"\n          d.id = e.id\n        if e.prefix?\n          if d.prefix?\n            throw new Error \"^paragate/htmlish/linearize@1^ duplicate prefixes in #{rpr d}\"\n          d.prefix = e.prefix\n        if e.class?\n          clasz = if d.class? then ( new Set d.class.split /\\s+/ ) else ( new Set() )\n          clasz.add c for c in e.class\n          d.class = [ clasz..., ]\n        if e.name?\n          d.name = e.name\n      #.....................................................................................................\n      yield dd d\n    #.......................................................................................................\n    when 'ctag'\n      yield dd { $key: '>tag', name, type: 'ctag', text, start, stop, $vnr, $: '^Ω15^', }\n    #.......................................................................................................\n    else yield dd { $key: '^unknown', $value: tree, $vnr, $: '^Ω16^', }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse_compact_tagname = ( text ) -> PGTH.parse_compact_tagname text, true\n\n#-----------------------------------------------------------------------------------------------------------\n$parse = ( grammar = null ) ->\n  SP        = require 'steampipes'\n  grammar  ?= new new_grammar { bare: true, }\n  line_nr   = 0\n  return SP.$ ( line, send ) ->\n    line_nr++\n    send new_datom '^newline', { $vnr: [ line_nr, 0, ], $: '^Ω17^', }\n    for d in grammar.parse line\n      send lets d, ( d ) -> d.$vnr[ 0 ] = line_nr\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nmerge_texts = ( d1, d2 ) ->\n  # { '$key': '^text', start: 0, stop: 7, text: 'before ', '$vnr': [ 1, 1 ], '$': '^Ω18^' }\n  R =\n    $key:   '^text'\n    start:  d1.start\n    stop:   d2.stop\n    text:   d1.text + d2.text\n    $vnr:   d1.$vnr\n    $:      d1.$[ ... d1.$.length - 1 ] + d2.$ + 'Ω19^'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nparse = ( P... ) ->\n  tokens  = @_parse P...\n  R       = []\n  prv_d   = null\n  for d, idx in tokens\n    if ( d.$key is '^text' )\n      if ( prv_d? ) and ( prv_d.$key is '^text' )\n        prv_d = merge_texts prv_d, d\n        continue\n      prv_d = d\n      continue\n    R.push prv_d if prv_d\n    prv_d = null\n    R.push d\n  R.push prv_d if prv_d?\n  return freeze R\n\n\n############################################################################################################\n### TAINT this seems backwards (but works?) ###\nMAIN            = @\nnew_grammar     = ( settings ) ->\n  R         = GRAMMAR.new_grammar 'Htmlish', MAIN, settings\n  R._parse  = R.parse\n  R.parse   = parse\n  return R\n\ngrammar         = new_grammar()\nHtmlish_grammar = grammar.constructor\nmodule.exports  = { Htmlish_grammar, grammar, new_grammar, $parse, }\n\n\n\n"
  ]
}