{
  "version": 3,
  "file": "htmlish.grammar.js",
  "sourceRoot": "..",
  "sources": [
    "src/htmlish.grammar.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'INTERTEXT/GRAMMARS/HTMLISH'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n# CHVTN                     = require 'chevrotain'\n{ lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\ntypes                     = require './types'\n{ isa\n  type_of\n  validate }              = types\nGRAMMAR                   = require './grammar'\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@lexer_modes =\n  #.........................................................................................................\n  outside_mode:\n    o_comment:        { match: /<!--[\\s\\S]*?-->/,                 line_breaks: true,            }\n    o_cdata:          { match: /<!\\[CDATA\\[[\\s\\S]*?]]>/,                                        }\n    o_doctype:        { match: /<!DOCTYPE\\s+[^>]*>/,                                            }\n    o_xmldecl:        { match: /<\\?xml\\s+[\\s\\S]*?\\?>/,                                          }\n    o_pi:             { match: /<\\?[\\s\\S]*?\\?>/,                                                }\n    i_slash_open:     { match: /<\\//,                             push_mode: \"inside_mode\",     }\n    i_open:           { match: /</,                               push_mode: \"inside_mode\",     }\n    o_text:           { match: /[^<]+/,                                                         }\n  #.........................................................................................................\n  inside_mode:\n    i_close:          { match: />/,                               pop_mode: true,               }\n    i_special_close:  { match: /\\?>/,                             pop_mode: true,               }\n    i_slash_close:    { match: /\\/>/,                             pop_mode: true,               }\n    stm_slash1:       { match: /\\/(?!>)/,                         push_mode: 'slashtext_mode',  }\n    i_slash:          { match: /\\//,                                                            }\n    v_equals:         { match: /\\s*=\\s*/,                         push_mode: 'value_mode',      }\n    i_name:           { match: /[^\\s!?=\\{\\[\\(<\\/>\\)\\]\\}'\"]+/,                                   }\n    i_whitespace:     { match: /[ \\t\\r\\n]/,                       skip: true,                   }\n  #.........................................................................................................\n  slashtext_mode:\n    stm_slash2:       { match: /\\//,                              switch_mode: \"outside_mode\",  }\n    stm_text:         { match: /[^\\/]+/,                                                        }\n  #.........................................................................................................\n  value_mode:\n    v_value:          { match: /\"[^\"]*\"|'[^']*'|[^>\\s\\/]+/,       pop_mode: true,               }\n\n#-----------------------------------------------------------------------------------------------------------\n@summarize = ( t ) ->\n  # `t` is an object whose keys are token names and whose values are token patterns\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'document', =>\n    @MANY =>\n      @OR [\n        { ALT: => @CONSUME t.o_doctype    }\n        { ALT: => @CONSUME t.o_xmldecl    }\n        { ALT: => @CONSUME t.o_pi         }\n        { ALT: => @CONSUME t.o_cdata      }\n        { ALT: => @CONSUME t.o_comment    }\n        { ALT: => @CONSUME t.o_text       }\n        { ALT: => @CONSUME t.stm_text     }\n        { ALT: => @SUBRULE @osntag        }\n        { ALT: => @SUBRULE @ctag          }\n        { ALT: => @CONSUME t.stm_slash2   }\n        ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'osntag', => ### `<a b=c>`, `<a b=c/>`, or `<a b=c/` ###\n    @CONSUME t.i_open\n    @CONSUME t.i_name\n    @OPTION => @SUBRULE @attributes\n    @OR [\n      { ALT: => @CONSUME t.i_close        }\n      { ALT: => @CONSUME t.i_slash_close  }\n      { ALT: => @CONSUME t.stm_slash1     }\n      ]\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'ctag', => ### `</a>` ###\n    @CONSUME t.i_slash_open\n    @CONSUME t.i_name\n    @CONSUME t.i_close\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'attributes', =>\n    @AT_LEAST_ONE => @SUBRULE @attribute\n\n  #---------------------------------------------------------------------------------------------------------\n  @RULE 'attribute', =>\n    @CONSUME t.i_name\n    @OPTION =>\n      @CONSUME t.v_equals\n      @CONSUME t.v_value\n\n#-----------------------------------------------------------------------------------------------------------\ndd = ( d ) ->\n  ### TAINT implement as optional functionality of `DATOM.new_datom()` ###\n  for k of d\n    delete d[ k ] if d[ k ] in [ undefined, null, '', ]\n  return d\n\n#-----------------------------------------------------------------------------------------------------------\n@linearize = ( source, tree, level = 0 ) ->\n  return null unless tree?\n  #.........................................................................................................\n  { name: token_name\n    $key\n    start\n    stop\n    text\n    $vnr } = tree\n  #.........................................................................................................\n  if $key is '^token'\n    switch token_name\n      when 'o_text', 'stm_text'   then  yield dd { $key: '^text',                start, stop, text, $vnr, $: '^ѱ1^', }\n      when 'stm_slash2'           then  yield dd { $key: '>tag', type: 'nctag',  start, stop, text, $vnr, $: '^ѱ2^', }\n      when 'o_comment'            then  yield dd { $key: '^comment',             start, stop, text, $vnr, $: '^ѱ3^', }\n      when 'o_pi'                 then  yield dd { $key: '^pi',                  start, stop, text, $vnr, $: '^ѱ4^', }\n      when 'o_doctype'            then  yield dd { $key: '^doctype',             start, stop, text, $vnr, $: '^ѱ5^', }\n      when 'o_cdata'\n        start1  = start + 9\n        stop2   = stop  - 3\n        text1   = source[ start   ... start1  ]\n        text2   = source[ start1  ... stop2   ]\n        text3   = source[ stop2   ... stop    ]\n        yield dd { $key: '<cdata', start,          stop: start1, text: text1, $vnr, $: '^ѱ6^', }\n        yield dd { $key: '^text',  start: start1,  stop: stop2,  text: text2, $vnr, $: '^ѱ7^', } if text2 isnt ''\n        yield dd { $key: '>cdata', start: stop2,   stop,         text: text3, $vnr, $: '^ѱ8^', }\n      else yield dd { $key: '^unknown', $value: tree, $vnr, $: '^ѱ9^', }\n    return null\n  throw new Error \"^445^ unknown $key #{rpr $key}\" unless $key in [ '^document', '^node', ]\n  #.........................................................................................................\n  { ukids } = tree\n  ### NOTE we assume that unique kids exist and that values are stored in source order ###\n  for _, ukid of ukids\n    $vnr = ukid.$vnr\n    break\n  #.........................................................................................................\n  if $key is '^document'\n    yield dd { $key: '<document', start: 0, stop: 0, source, errors: tree.errors, $vnr: [ -Infinity, ], $: '^ѱ10^', }\n    for subtree in tree.kids\n      yield from @linearize source, subtree, level + 1\n    x = text.length\n    yield dd { $key: '>document', start: x, stop: x, $vnr: [ Infinity, ], $: '^ѱ11^', }\n    return null\n  #.........................................................................................................\n  return null unless ( name = tree.ukids?.i_name?.text )? ### may happen when parsing errors occur ###\n  switch token_name\n    #.......................................................................................................\n    when 'osntag'\n      $key = '<tag'\n      if      tree.ukids.i_close?       then type = 'otag'\n      else if tree.ukids.i_slash_close? then type = 'stag'; $key = '^tag'\n      else if tree.ukids.stm_slash1?    then type = 'ntag'\n      if ( attributes = tree.ukids.attributes )?\n        atrs = {}\n        for attribute in attributes.kids\n          k         = attribute.ukids.i_name.text\n          v         = attribute.ukids.v_value?.text ? true\n          atrs[ k ] = v\n        yield dd { $key, name, type, text, start, stop, atrs, $vnr, $: '^ѱ12^', }\n      else\n        yield dd { $key, name, type, text, start, stop, $vnr, $: '^ѱ13^', }\n    #.......................................................................................................\n    when 'ctag'\n      yield dd { $key: '>tag', name, type: 'ctag', text, start, stop, $vnr, $: '^ѱ14^', }\n    #.......................................................................................................\n    else yield dd { $key: '^unknown', $value: tree, $vnr, $: '^ѱ15^', }\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = GRAMMAR.new_grammar 'Htmlish', @\n\n\n\n\n"
  ]
}