{
  "version": 3,
  "file": "regex-whitespace.grammar.js",
  "sourceRoot": "..",
  "sources": [
    "src/regex-whitespace.grammar.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PARAGATE/GRAMMARS/REGEXWS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n# CHVTN                     = require 'chevrotain'\n{ lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\ntypes                     = require '../paragate/lib/types'\n{ isa\n  type_of\n  validate }              = types\nGRAMMAR                   = require '../paragate/lib/grammar'\nINTERTEXT                 = require 'intertext'\n{ rpr }                   = INTERTEXT.export()\nspace_re                  = /\\x20+/y\nMultimix                  = require '../paragate/node_modules/multimix'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( source ) ->\n  validate.text source\n  R           = []\n  lines       = source.split @nl_re\n  linenr      = 0\n  colnr       = 1\n  nl          = ''\n  #.........................................................................................................\n  start = 0\n  stop  = source.length\n  R.push { $key: '<document', start, stop, source, $vnr: [ -Infinity, ], $: '^r1^' }\n  for idx in [ 0 .. lines.length ] by 2\n    line            = lines[ idx     ]\n    nl              = lines[ idx + 1 ] ? ''\n    stop            = start + line.length + nl.length\n    linenr++\n    { dent, text, } = ( line.match @dent_re ).groups\n    level           = dent.length\n    line           += nl\n    R.push { $key: '^dline', start, stop, dent, text, nl, line, level, $vnr: [ linenr, colnr ], $: '^r2^' }\n    start           = stop\n  start = stop = source.length\n  R.push { $key: '>document', start, stop, $vnr: [ +Infinity, ], $: '^r3^' }\n  #.........................................................................................................\n  return freeze if @as_blocks then ( @_as_blocks R ) else R\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_blocks = ( dlines ) ->\n  R           = []\n  blocks      = []\n  blanks      = []\n  prv_level   = null\n  #.........................................................................................................\n  consolidate = ( $key, buffer ) ->\n    first       = buffer[ 0 ]\n    last        = buffer[ buffer.length - 1 ]\n    start       = first.start\n    stop        = last.stop\n    $vnr        = first.$vnr\n    level       = first.level ? 0\n    linecount   = buffer.length\n    # debug '^223^', rpr buffer\n    if $key is '^block' then  text  = ( (          d.text + d.nl ) for d in buffer ).join ''\n    else                      text  = ( ( d.dent + d.text + d.nl ) for d in buffer ).join ''\n    return { $key, start, stop, text, level, linecount, $vnr, $: '^r4^', }\n  #.........................................................................................................\n  flush = ( $key, collection ) ->\n    return collection unless collection.length > 0\n    R.push consolidate $key, collection\n    return []\n  #.........................................................................................................\n  R.push dlines[ 0 ]\n  for idx in [ 1 ... dlines.length - 1 ]\n    d = dlines[ idx ]\n    unless d.$key is '^dline'\n      R.push d\n      continue\n    if @blank_re.test d.line\n      blocks = flush '^block', blocks\n      blanks.push d\n      continue\n    ### TAINT account for differing levels ###\n    blanks    = flush '^blank', blanks\n    blocks    = flush '^block', blocks if prv_level isnt d.level\n    prv_level = d.level\n    blocks.push d\n  #.........................................................................................................\n  blanks = flush '^blank', blanks\n  blocks = flush '^block', blocks\n  R.push dlines[ dlines.length - 1 ]\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Rxws_grammar extends Multimix\n  @include MAIN, { overwrite: true, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null ) ->\n    super()\n    defaults =\n      nl_re:      /(\\n)/ ### NOTE might also use `/(\\n|\\r\\n?)/` ###\n      dent_re:    /^(?<dent>\\x20*)(?<text>.*)/\n      blank_re:   /^\\s*$/\n      name:       'rxws_grammar'\n      as_blocks:   true\n    settings    = { defaults..., settings..., }\n    @name       = settings.name\n    @nl_re      = settings.nl_re\n    @dent_re    = settings.dent_re\n    @blank_re   = settings.blank_re\n    @as_blocks  = settings.as_blocks\n    return @\n\n\nrxws_grammar    = new Rxws_grammar()\nmodule.exports  = { rxws_grammar, Rxws_grammar, }\n\n\n\n\n\n\n\n"
  ]
}