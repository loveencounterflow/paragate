{
  "version": 3,
  "file": "types.js",
  "sourceRoot": "..",
  "sources": [
    "src/types.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB,EAhB5B;;;EAmBA,IAAC,CAAA,OAAD,CAAS,WAAT,EAAsB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,CAAA,KAAK,EAAP,CAAA,IAAe,CAAM,SAAN,CAAf,IAA6B,CAAE,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,CAAT,CAAF;EAAtC,CAAtB,EAnBA;;;EAsBA,IAAC,CAAA,OAAD,CAAS,uCAAT,EACE;IAAA,KAAA,EACE;MAAA,8CAAA,EAAgD,QAAA,CAAE,CAAF,CAAA;QAC9C,IAAe,IAAC,CAAA,GAAG,CAAC,KAAL,CAAmB,CAAnB,CAAf;AAAA,iBAAO,KAAP;;QACA,IAAe,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAnB,CAAf;AAAA,iBAAO,KAAP;;QACA,IAAe,IAAC,CAAA,GAAG,CAAC,QAAL,CAAmB,CAAnB,CAAf;AAAA,iBAAO,KAAP;;AACA,eAAO;MAJuC;IAAhD;EADF,CADF,EAtBA;;;EA+BA,IAAC,CAAA,OAAD,CAAS,2CAAT,EACE;IAAA,KAAA,EACE;MAAA,gBAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA9C;MACA,kCAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,qCAAL,CAA2C,CAAC,CAAC,KAA7C;MAAT,CAD9C;MAEA,0CAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAM,mBAAN,CAAA,IAA4B,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,SAArB;MAArC,CAF9C;MAGA,4CAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAM,qBAAN,CAAA,IAA4B,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,WAArB;MAArC,CAH9C;MAIA,mCAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAO,kBAAP,CAAA,IAA4B,IAAC,CAAA,GAAG,CAAC,OAAL,CAAmB,CAAC,CAAC,QAArB;MAArC,CAJ9C;MAKA,sCAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAO,qBAAP,CAAA,IAA4B,IAAC,CAAA,GAAG,CAAC,OAAL,CAAmB,CAAC,CAAC,WAArB;MAArC,CAL9C;MAMA,sCAAA,EAA8C,QAAA,CAAE,CAAF,CAAA;eAAS,CAAM,eAAN,CAAA,IAA4B,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB;MAArC;IAN9C;EADF,CADF;;EA/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/PARSERS/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'not_given', ( x ) -> ( x is '' ) or ( not x? ) or ( @isa.nan x )\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'intertext_parsers_lexer_token_matcher',\n  tests:\n    \"x is a regex, a nonempty_text, or a function\": ( x ) ->\n      return true if @isa.regex         x\n      return true if @isa.nonempty_text x\n      return true if @isa.function      x\n      return false\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'intertext_parsers_lexer_token_description',\n  tests:\n    \"x is an object\":                             ( x ) -> @isa.object x\n    \"x.match is a valid token matcher\":           ( x ) -> @isa.intertext_parsers_lexer_token_matcher x.match\n    \"x.push_mode is an optional nonempty_text\":   ( x ) -> ( not x.push_mode?     ) or @isa.nonempty_text x.push_mode\n    \"x.switch_mode is an optional nonempty_text\": ( x ) -> ( not x.switch_mode?   ) or @isa.nonempty_text x.switch_mode\n    \"x.pop_mode is an optional boolean\":          ( x ) -> ( not  x.pop_mode?     ) or @isa.boolean       x.pop_mode\n    \"x.line_breaks is an optional boolean\":       ( x ) -> ( not  x.line_breaks?  ) or @isa.boolean       x.line_breaks\n    \"x.group is an optional nonempty_text\":       ( x ) -> ( not x.group?         ) or @isa.nonempty_text x.group\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'pd_nonempty_list_of_positive_integers', ( x ) ->\n#   return false unless @isa.nonempty_list x\n#   return x.every ( xx ) => @isa.positive_integer xx\n#     \"x has sigil\":                            ( x ) -> x in '^<>~[]'\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'pd_datom_key',\n#   tests:\n#     \"x is a nonempty text\":                   ( x ) -> @isa.nonempty_text   x\n#     \"x has sigil\":                            ( x ) -> @isa.pd_datom_sigil  x[ 0 ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'pd_datom',\n#   tests:\n#     \"x is a object\":                          ( x ) -> @isa.object          x\n#     \"x has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n#     \"x.key is a pd_datom_key\":                ( x ) -> @isa.pd_datom_key    x.key\n#     \"x.$stamped is an optional boolean\":      ( x ) -> ( not x.$stamped? ) or ( @isa.boolean x.$stamped )\n#     \"x.$dirty is an optional boolean\":        ( x ) -> ( not x.$dirty?   ) or ( @isa.boolean x.$dirty   )\n#     \"x.$fresh is an optional boolean\":        ( x ) -> ( not x.$fresh?   ) or ( @isa.boolean x.$fresh   )\n#     #.......................................................................................................\n#     \"x.$vnr is an optional nonempty list of positive integers\": ( x ) ->\n#       ( not x.$vnr? ) or @isa.pd_nonempty_list_of_positive_integers x.$vnr\n\n#     # \"?..$vnr is a ?positive\":            ( x ) -> ( not x.$vnr? ) or @isa.positive x.$vnr\n# #     \"? has key 'vlnr_txt'\":                   ( x ) -> @has_key             x, 'vlnr_txt'\n# #     \"? has key 'value'\":                      ( x ) -> @has_key             x, 'value'\n# #     \"?.vlnr_txt is a nonempty text\":          ( x ) -> @isa.nonempty_text   x.vlnr_txt\n# #     \"?.vlnr_txt starts, ends with '[]'\":      ( x ) -> ( x.vlnr_txt.match /^\\[.*\\]$/ )?\n# #     \"?.vlnr_txt is a JSON array of integers\": ( x ) ->\n# #       # debug 'Âµ55589', x\n# #       ( @isa.list ( lst = JSON.parse x.vlnr_txt ) ) and \\\n# #       ( lst.every ( xx ) => ( @isa.integer xx ) and ( @isa.positive xx ) )\n\n# # #-----------------------------------------------------------------------------------------------------------\n# # @declare 'true', ( x ) -> x is true\n\n"
  ]
}